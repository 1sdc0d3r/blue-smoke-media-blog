{"version":3,"sources":["components/ArticleView.jsx"],"names":["Article","history","id","useParams","useState","post","setPost","loadingMessage","setLoadingMessage","encodedURL","encodeURI","location","pathname","useEffect","axios","get","serverURL","then","data","message","catch","err","console","log","src","imageUrl","alt","imageAlt","className","title","ReactHtmlParser","content","href","data-size","target","rel","color","date","to","author","category","tags","split","map","e","i","name","snippet"],"mappings":"4SAiBe,SAASA,EAAT,GAA+B,IAAZC,EAAW,EAAXA,QACxBC,EAAOC,cAAPD,GADmC,EAEnBE,qBAFmB,mBAEpCC,EAFoC,KAE9BC,EAF8B,OAGCF,mBAAS,cAHV,mBAGpCG,EAHoC,KAGpBC,EAHoB,KAIrCC,EAAaC,UAAU,iCAAD,OACOT,EAAQU,SAASC,WAUpD,OARAC,qBAAU,WACRC,IACGC,IADH,UACUC,IAAU,GADpB,YAC0Bd,IACvBe,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OACJA,EAAK,GAAKZ,EAAQY,EAAK,IAAMV,EAAkBU,EAAKC,YAErDC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QAC7B,CAACnB,IAEF,oCACGG,EACC,oCACE,iCACE,yBACEmB,IAAG,2EAAsEnB,EAAKoB,UAC9EC,IAAKrB,EAAKsB,SACVC,UAAU,gBAEZ,4BAAKvB,EAAKwB,OAEV,yBAAKD,UAAU,WAAWE,IAAgBzB,EAAK0B,UAC/C,yBAAKH,UAAU,cACb,yBAAKA,UAAU,SACb,qCAEE,4BACE,uBACEI,KAAI,mDAA8CvB,IAElD,yBACEe,IAzCtB,qFA0CsBE,IAAI,gBACJE,UAAU,WAIhB,4BACE,uBACEI,KAAI,gDAA2CvB,GAC/CwB,YAAU,SAEV,yBAAKT,IAtDzB,oFAsDuCE,IAAI,eAAeE,UAAU,WAGpD,4BACE,uBACEI,KAAI,8DAAyDvB,GAC7DyB,OAAO,SACPC,IAAI,YAEJ,yBACEX,IA5DtB,qFA6DsBE,IAAI,gBACJE,UAAU,WAIhB,4BACE,uBACEI,KAAI,0BAAqB3B,EAAKwB,MAA1B,iBAAwCpB,IAE5C,kBAAC,IAAD,CAAQ2B,MAAM,gBAKtB,yBAAKR,UAAU,QACb,sCAAYvB,EAAKgC,KAAO,cAAW,IACnC,uBAAGT,UAAU,UACX,kBAAC,IAAD,CAAMU,GAAE,kBAAajC,EAAKkC,SAAWlC,EAAKkC,QACzClC,EAAKgC,KAAL,kBAAkBhC,EAAKgC,MAAS,IAEnC,wCACA,2BACE,kBAAC,IAAD,CAAMC,GAAE,oBAAejC,EAAKmC,WACzB,IACAnC,EAAKmC,aAKd,yBAAKZ,UAAU,QACb,oCACA,2BACGvB,EAAKoC,KAAKC,MAAM,KAAKC,KAAI,SAACC,EAAGC,GAAJ,OACxB,kBAAC,IAAD,CAAMP,GAAE,gBAAWM,IAAY,IAANC,EAAA,kBAAgBD,GAAMA,SAOvD,kBAAC,IAAD,KACE,+BAAQvC,EAAKwB,OACb,0BAAMiB,KAAK,WAAWf,QAAS1B,EAAKoC,OACpC,0BAAMK,KAAK,cAAcf,QAAS1B,EAAK0C,UACvC,0BAAMD,KAAK,SAASf,QAAS1B,EAAKkC,WAItC,uBAAGrC,GAAG,WAAWK","file":"static/js/4.c35953f0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Helmet } from \"react-helmet\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport serverURL from \"../utils\";\n\nimport { FiMail } from \"react-icons/fi\";\n\n//* Images\nconst twitter =\n  \"https://blue-smoke-media.s3-us-west-1.amazonaws.com/Blog/social+media/twitter.png\";\nconst facebook =\n  \"https://blue-smoke-media.s3-us-west-1.amazonaws.com/Blog/social+media/facebook.png\";\nconst linkedIn =\n  \"https://blue-smoke-media.s3-us-west-1.amazonaws.com/Blog/social+media/linkedIn.png\";\n\nexport default function Article({ history }) {\n  const { id } = useParams();\n  const [post, setPost] = useState();\n  const [loadingMessage, setLoadingMessage] = useState(\"Loading...\");\n  const encodedURL = encodeURI(\n    `https://www.bluesmokemedia.com${history.location.pathname}`\n  );\n  useEffect(() => {\n    axios\n      .get(`${serverURL[1]}/${id}`)\n      .then(({ data }) =>\n        data[0] ? setPost(data[0]) : setLoadingMessage(data.message)\n      )\n      .catch((err) => console.log(err));\n  }, [id]);\n  return (\n    <>\n      {post ? (\n        <>\n          <article>\n            <img\n              src={`https://blue-smoke-media.s3-us-west-1.amazonaws.com/Blog/primary/${post.imageUrl}`}\n              alt={post.imageAlt}\n              className=\"primary-img\"\n            />\n            <h1>{post.title}</h1>\n            {/* todo check with CoBe */}\n            <pre className=\"content\">{ReactHtmlParser(post.content)}</pre>\n            <div className=\"share-info\">\n              <div className=\"share\">\n                <ul>\n                  Share:\n                  <li>\n                    <a\n                      href={`https://facebook.com/sharer/sharer.php?u=${encodedURL}`}\n                    >\n                      <img\n                        src={facebook}\n                        alt=\"facebook icon\"\n                        className=\"icon\"\n                      />\n                    </a>\n                  </li>\n                  <li>\n                    <a\n                      href={`https://twitter.com/intent/tweet?text=${encodedURL}`}\n                      data-size=\"large\"\n                    >\n                      <img src={twitter} alt=\"twitter icon\" className=\"icon\" />\n                    </a>\n                  </li>\n                  <li>\n                    <a\n                      href={`https://www.linkedin.com/shareArticle?mini=true&url=${encodedURL}`}\n                      target=\"_blank\"\n                      rel=\"noopener\"\n                    >\n                      <img\n                        src={linkedIn}\n                        alt=\"LinkedIn icon\"\n                        className=\"icon\"\n                      />\n                    </a>\n                  </li>\n                  <li>\n                    <a\n                      href={`mailto:?subject=${post.title}&body=${encodedURL}`}\n                    >\n                      <FiMail color=\"#1e92f6\" />\n                    </a>\n                  </li>\n                </ul>\n              </div>\n              <div className=\"info\">\n                <h4>Author {post.date ? \"• Date\" : \"\"}</h4>\n                <p className=\"author\">\n                  <Link to={`/author/${post.author}`}>{post.author}</Link>\n                  {post.date ? ` • ${post.date}` : \"\"}\n                </p>\n                <h4>Category</h4>\n                <p>\n                  <Link to={`/category/${post.category}`}>\n                    {\" \"}\n                    {post.category}\n                  </Link>\n                </p>\n              </div>\n            </div>\n            <div className=\"tags\">\n              <h4>Tags</h4>\n              <p>\n                {post.tags.split(\",\").map((e, i) => (\n                  <Link to={`/tags/${e}`}>{i !== 0 ? ` • ${e}` : e}</Link>\n                ))}\n              </p>\n            </div>\n\n            {/* //todo category tags here */}\n          </article>\n          <Helmet>\n            <title>{post.title}</title>\n            <meta name=\"keywords\" content={post.tags} />\n            <meta name=\"description\" content={post.snippet} />\n            <meta name=\"author\" content={post.author} />\n          </Helmet>\n        </>\n      ) : (\n        <p id=\"loading\">{loadingMessage}</p>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}